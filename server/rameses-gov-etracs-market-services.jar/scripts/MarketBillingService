import com.rameses.annotations.*;
import java.text.*;
import com.rameses.functions.*;
import com.rameses.util.*;
import market.facts.*;
import com.rameses.rules.common.*;
import treasury.utils.*;
import treasury.facts.*;


class MarketBillingService {
	
	@Service("BillingRuleService")
	def billingRuleSvc;

	@Service("DateService")
	def dateSvc;

	@DataContext("market_rental_rate")
	def rentalRate;

	@DataContext("market_account")
	def acctEm;

	@DataContext("market_rentalunit")
	def unitEm;

	@DataContext("market_rental_payment_status")
	def statusEm;

	def getRentalRates(def unitid, def fromdate, def todate, def ratetype ) {
		def df = new java.text.SimpleDateFormat("yyyy-MM-dd");
		def list = rentalRate.find( [unitid: unitid ] ).orderBy("effectivedate DESC").list();
		def cal = Calendar.instance;
		def mlist = [];
		list.each {
			def ed = df.parse( df.format( it.effectivedate ));
			mlist.add(0, new MarketRentalRate( fromdate: ed, todate: todate, rate: it.rate, ratetype: ratetype ));
			cal.setTime( ed );
			cal.add( Calendar.DATE, -1 );
			todate = cal.getTime();
		}
		return mlist;
	}

	@ProxyMethod
	public def getBilling( def o ) {
		if(o.billdate) o.todate = o.billdate;

		def df = new java.text.SimpleDateFormat("yyyy-MM-dd");
		def todate = o.todate;
		if(todate) todate = df.parse( todate );
		else {
			todate = df.parse( df.format( dateSvc.getServerDate() ));
		}
		
		def acct = acctEm.find( [objid: o.acctid ] ).first();
		if(!acct) throw new Exception("Account not found");
		def unit = unitEm.find([objid: acct.unit.objid ] ).first();

		//find partial balance and paid until date.
		def pmtStat = statusEm.find( [acctid: o.acctid ] ).orderBy("paiduntildate DESC").limit(1).first();
		if(!pmtStat) throw new Exception("Please add first beginning balance entry to this account");

		def fromdate = DateFunc.getDayAdd( pmtStat.paiduntildate, 1 );

		def factBuilder = new treasury.utils.FactBuilder();
		factBuilder.facts << new MarketAccount( paymentmode: acct.paymentmode, partialbalance: pmtStat.partialbalance );
		factBuilder.facts << new MarketBilling( fromdate: fromdate, todate: todate );
		factBuilder.facts << new MarketRentalUnit( unit );		
		factBuilder.facts.addAll( getRentalRates( acct.unit.objid, fromdate, todate, acct.unit.ratetype ) );

		//run the rules
		def req = [rulename: 'marketbilling', params: [acctid: acct.objid ] ];
		req.factBuilder = factBuilder;
		if( o.include_items ) req.include_items = true;
		def res = billingRuleSvc.execute( req );

		def bill = acct;
		bill.billitems = res.billitems;
		bill.amount = res.amount;
		if(res.items) bill.items = res.items;

		def bitems = bill.billitems.findAll{ it.type == 'market_rental' }.sort{it.fromdate}; 
		bill.fromdate = bitems.first().fromdate;
		bill.todate = bitems.last().todate;
		bill.billdate = todate;
		return bill;
	}

}